name: deploy

on: [push, pull_request]
#  push:
#    tags:
#      - "v*.*.*"
#
#  workflow_dispatch:
#    inputs:
#      test_triton:
#        description: 'Manually test triton'
#        required: false
#        type: boolean
#        default: false

env:
  PIP_CACHE_DIR: /nvme/github-actions/pip-cache

jobs:
  test_functions:
    # if: startsWith(github.ref, 'refs/tags/') == true
    runs-on: [self-hosted, linux-a100]
    timeout-minutes: 4320 # 72hours
    environment: 'prod'
    container:
      image: nvcr.io/nvidia/tritonserver:22.12-py3
      options: "--gpus=all --ipc=host --user root -e PIP_CACHE_DIR=/root/.cache/pip"
      volumes:
        - /nvme/github-actions/pip-cache:/root/.cache/pip
        - /nvme/qa_test_models:/nvme/qa_test_models
        - /nvme/qa_test_models/autotest_model:/nvme/qa_test_models/autotest_model
        - /nvme/qa_test_models/autotest_model/log:/nvme/qa_test_models/autotest_model/log
    steps:
      - name: Setup systems
        run: |
          rm /etc/apt/sources.list.d/cuda*.list
          apt-get update && apt-get install -y --no-install-recommends rapidjson-dev libgoogle-glog-dev libgl1
          rm -rf /var/lib/apt/lists/*
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install pytorch
        run: |
          echo $(pwd)
          python3 -m pip cache dir
          python3 -m pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 --extra-index-url https://download.pytorch.org/whl/cu117
          python3 -m pip install cmake packaging
      - name: Install lmdeploy from pypi
        if: startsWith(github.ref, 'refs/tags/') == true
        run: |
          python3 -m pip install lmdeploy[all]
          python3 -m pip install -r requirements/test.txt
          lmdeploy check_env
      - name: Install lmdeploy from source
        if: startsWith(github.ref, 'refs/tags/') != true
        run: |
          python3 -m pip install flash-attn --no-build-isolation
          python3 -m pip install -r requirements.txt -r requirements/test.txt
          mkdir build
          bash ../generate.sh
          make -j$(nproc) && make install
          cd ..
          python3 -m pip install .
          lmdeploy check_env
      - name: Test lmdeploy
        run: |
          pytest autotest -m Qwen_7B_Chat --alluredir=allure-results --clean-alluredir
      - name: Clear workfile
        if: always()
        run: |
          rm -rf .git ./*

  test_triton:
    if: startsWith(github.ref, 'refs/tags/') == true
    runs-on: [self-hosted, linux-a100]
    timeout-minutes: 4320 # 72hours
    environment: 'prod'
    env:
      HF_MODEL: /nvme/qa_test_models/internlm-chat-20b
      WORKDIR: /nvme/qa_test_models/triton_workspace
      TB_MODEL: internlm-chat-20b-fp16-tp2
      GRPC_PORT: 33337
    steps:
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Create test container
        run: |
          export CONTAINER_ID=$(docker create \
            --rm \
            --gpus='"device=0,1"' \
            --shm-size 16g \
            --cap-add=SYS_PTRACE \
            --cap-add=SYS_ADMIN \
            --security-opt seccomp=unconfined \
            --name lmdeploy-ci-triton \
            --workdir /__w/lmdeploy/lmdeploy \
            --env PIP_CACHE_DIR=/root/.cache/pip \
            --env NCCL_LAUNCH_MODE=GROUP \
            -v $(pwd)/../../:/__w \
            -v ${HF_MODEL}:/root/workspace/hf_model \
            -v ${WORKDIR}:/root/workspace/workdir \
            -v ${PIP_CACHE_DIR}:/root/.cache/pip \
            openmmlab/lmdeploy:latest tail -f /dev/null \
             )
          docker start $CONTAINER_ID
          echo "CONTAINER_ID=$CONTAINER_ID"
          echo "CONTAINER_ID=$CONTAINER_ID"  >> $GITHUB_ENV
      - name: Build lmdeploy from source
        run: |
          docker exec $CONTAINER_ID cp -r ../../build build
          docker exec --workdir /__w/lmdeploy/lmdeploy/build \
            --env http_proxy=${{secrets.PROXY}} \
            --env https_proxy=${{secrets.PROXY}} \
            $CONTAINER_ID  sh ../generate.sh
          docker exec --workdir /__w/lmdeploy/lmdeploy/build $CONTAINER_ID  make -j$(nproc)
          docker exec --workdir /__w/lmdeploy/lmdeploy/build $CONTAINER_ID  make install
      - name: Install lmdeploy
        run: |
          docker exec \
            --env http_proxy=${{secrets.PROXY}} \
            --env https_proxy=${{secrets.PROXY}} \
            $CONTAINER_ID python3 -m pip install tritonclient[grpc]
          docker exec \
            --env http_proxy=${{secrets.PROXY}} \
            --env https_proxy=${{secrets.PROXY}} \
            $CONTAINER_ID python3 -m pip install -r requirements/test.txt
          docker exec $CONTAINER_ID python3 -m pip install .
          # docker exec $CONTAINER_ID check_env
      - name: Convert to turbomind model
        run: |
          docker exec $CONTAINER_ID \
            lmdeploy convert \
            --model-name internlm-chat-20b \
            --model-path /root/workspace/hf_model \
            --tp 2 \
            --dst-path /root/workspace/workdir/${TB_MODEL}
      - name: Start triton server service
        run: |
          docker exec --detach $CONTAINER_ID \
            tritonserver \
            --model-repository=/root/workspace/workdir/${TB_MODEL}/model_repository \
            --allow-http=0 \
            --allow-grpc=1 \
            --grpc-port=${GRPC_PORT} \
            --log-verbose=0 \
            --allow-metrics=1
          # wait for triton server to start up
          sleep 180s
      - name: Test triton server
        run: |
          docker exec \
            --env no_proxy=localhost,127.0.0.1 \
            $CONTAINER_ID python3 .github/scripts/test_triton.py --port ${GRPC_PORT}
      - name: Clear workfile
        if: always()
        run: |
          docker exec $CONTAINER_ID rm -rf /root/workspace/workdir/${TB_MODEL}
          docker exec --workdir /__w/lmdeploy/lmdeploy $CONTAINER_ID rm -rf .git ./*
          docker stop $CONTAINER_ID
