name: deploy

on: [push, pull_request]

jobs:
  test_functions:
    runs-on: [self-hosted, linux-3090]
    timeout-minutes: 4320 # 72hours
    environment: 'prod'
    container:
      image: nvcr.io/nvidia/tritonserver:22.12-py3
      options: "--gpus=all --ipc=host --user root"
      volumes:
        - /mnt/models-new/github-actions/pip-cache:/root/.cache/pip
    steps:
      - name: Setup systems
        run: |
          rm /etc/apt/sources.list.d/cuda*.list
          apt-get update && apt-get install -y --no-install-recommends rapidjson-dev libgoogle-glog-dev ffmpeg libsm6 libxext6
          rm -rf /var/lib/apt/lists/*
          export PIP_CACHE_DIR=/root/.cache/pip
          echo "PIP_CACHE_DIR=${PIP_CACHE_DIR}" >> $GITHUB_ENV
      - name: Clone repository
        uses: actions/checkout@v2
      - name: Install pytorch
        run: |
          echo $(pwd)
          python3 -m pip cache dir
          python3 -m pip install torch==1.13.1+cu117 torchvision==0.14.1+cu117 --extra-index-url https://download.pytorch.org/whl/cu117
          python3 -m pip install cmake packaging
      - name: Install lmdeploy from pypi
        if: startsWith(github.ref, 'refs/tags/') == true
        run: |
          python3 -m pip install lmdeploy[all]
          python3 -m pip install -r requirements/test.txt
          lmdeploy check_env
      - name: Install lmdeploy from source
        if: startsWith(github.ref, 'refs/tags/') != true
        run: |
          python3 -m pip install -r requirements.txt -r requirements/test.txt
          cp -r /__w/build ./build
          cd build
          bash ../generate.sh
          make -j$(nproc) && make install
          cd ..
          python3 -m pip install .
          lmdeploy check_env
      - name: Test lmdeploy
        run: |
          echo "TODO"

  test_triton:
    runs-on: [self-hosted, linux-a100]
    timeout-minutes: 4320 # 72hours
    environment: 'prod'
    env:
      HF_MODEL: /nvme/shared_data/InternLM/internlm-chat-20b-w4
      WORKSPACE: /mnt/models-new/ningsheng/workdir
      TB_MODEL: /mnt/models-new/ningsheng/internlm-chat-20b-w4-turbomind
      TP: 2
    steps:
      - uses: actions/checkout@v2
      - name: Convert to turbomind model
        run: |
          export ROOT_DIR=$(dirname "${TB_MODEL}")
          export BASE_NAME=$(basename "${TB_MODEL}")
          mkdir -p ${ROOT_DIR}
          docker run --rm --gpus=all \
            -v ${HF_MODEL}:/root/workspace/model \
            -v ${ROOT_DIR}:/root/workspace/workdir \
            --cap-add=SYS_PTRACE \
            --cap-add=SYS_ADMIN \
            --security-opt seccomp=unconfined \
            --env NCCL_LAUNCH_MODE=GROUP \
            openmmlab/lmdeploy:latest \
            lmdeploy convert \
            --model-name internlm-20b \
            --model-path /root/workspace/model \
            --model-format awq \
            --tp ${TP} \
            --group-size 128 \
            --dst-path /root/workspace/workdir/${BASE_NAME}

          docker run --rm -v ${TB_MODEL}:/opt/tmpdir openmmlab/lmdeploy:latest chmod -R 777 /opt/tmpdir
      - name: Run triton server test
        run: |
          python3 .github/scripts/test_triton.py ${TB_MODEL}

  test_triton_3090:
    runs-on: [self-hosted, linux-3090]
    timeout-minutes: 4320 # 72hours
    environment: 'prod'
    env:
      HF_MODEL: /data1/lmdeploy-data/internlm-chat-7b-v1_1
      TB_MODEL: /data1/lmdeploy-data/workspace/internlm-chat-7b-v1_1-turbomind
    steps:
      - uses: actions/checkout@v2
      - name: Convert to turbomind model
        run: |
          export ROOT_DIR=$(dirname "${TB_MODEL}")
          export BASE_NAME=$(basename "${TB_MODEL}")
          mkdir -p ${ROOT_DIR}
          docker run --rm --gpus=all \
            -v ${HF_MODEL}:/root/workspace/model \
            -v ${ROOT_DIR}:/root/workspace/workdir \
            --cap-add=SYS_PTRACE \
            --cap-add=SYS_ADMIN \
            --security-opt seccomp=unconfined \
            --env NCCL_LAUNCH_MODE=GROUP \
            openmmlab/lmdeploy:latest \
            lmdeploy convert \
            --model-name internlm-chat-7b \
            --model-path /root/workspace/model \
            --dst-path /root/workspace/workdir/${BASE_NAME}
      - name: Run triton server test
        run: |
          docker run --rm -v ${TB_MODEL}:/opt/tmpdir openmmlab/lmdeploy:latest chmod -R 777 /opt/tmpdir
          python3 -m pip install docker
          python3 .github/scripts/test_triton.py ${TB_MODEL}
